//
// Created by Electrux Redsworth on 9/19/17.
//

#ifndef PROJECTCREATOR_FINDSFML_HPP
#define PROJECTCREATOR_FINDSFML_HPP

#include <string>

const std::string FINDSFMLFILESTR = "# This script locates the SFML library\n"
	"# ------------------------------------\n"
	"#\n"
	"# Usage\n"
	"# -----\n"
	"#\n"
	"# When you try to locate the SFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n"
	"# If none is given, the SFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n"
	"# example:\n"
	"#   find_package(SFML COMPONENTS graphics window system) # find the graphics, window and system modules\n"
	"#\n"
	"# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n"
	"# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n"
	"# example:\n"
	"#   find_package(SFML COMPONENTS ...)     # no specific version required\n"
	"#   find_package(SFML 2 COMPONENTS ...)   # any 2.x version\n"
	"#   find_package(SFML 2.4 COMPONENTS ...) # version 2.4 or greater\n"
	"#\n"
	"# By default, the dynamic libraries of SFML will be found. To find the static ones instead,\n"
	"# you must set the SFML_STATIC_LIBRARIES variable to TRUE before calling find_package(SFML ...).\n"
	"# Since you have to link yourself all the SFML dependencies when you link it statically, the following\n"
	"# additional variables are defined: SFML_XXX_DEPENDENCIES and SFML_DEPENDENCIES (see their detailed\n"
	"# description below).\n"
	"# In case of static linking, the SFML_STATIC macro will also be defined by this script.\n"
	"# example:\n"
	"#   set(SFML_STATIC_LIBRARIES TRUE)\n"
	"#   find_package(SFML 2 COMPONENTS network system)\n"
	"#\n"
	"# On Mac OS X if SFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n"
	"# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n"
	"# Moreover, keep in mind that SFML frameworks are only available as release libraries unlike dylibs which\n"
	"# are available for both release and debug modes.\n"
	"#\n"
	"# If SFML is not installed in a standard path, you can use the SFML_ROOT CMake (or environment) variable\n"
	"# to tell CMake where SFML is.\n"
	"#\n"
	"# Output\n"
	"# ------\n"
	"#\n"
	"# This script defines the following variables:\n"
	"# - For each specified module XXX (system, window, graphics, network, audio, main):\n"
	"#   - SFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to SFML_XXX_LIBRARY_RELEASE is no debug version is found)\n"
	"#   - SFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to SFML_XXX_LIBRARY_DEBUG is no release version is found)\n"
	"#   - SFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n"
	"#   - SFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n"
	"#   - SFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n"
	"# - SFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n"
	"# - SFML_FOUND:        true if all the required modules are found\n"
	"# - SFML_INCLUDE_DIR:  the path where SFML headers are located (the directory containing the SFML/Config.hpp file)\n"
	"# - SFML_DEPENDENCIES: the list of libraries SFML depends on, in case of static linking\n"
	"#\n"
	"# example:\n"
	"#   find_package(SFML 2 COMPONENTS system window graphics audio REQUIRED)\n"
	"#   include_directories(${SFML_INCLUDE_DIR})\n"
	"#   add_executable(myapp ...)\n"
	"#   target_link_libraries(myapp ${SFML_LIBRARIES})\n"
	"\n"
	"# define the SFML_STATIC macro if static build was chosen\n"
	"if(SFML_STATIC_LIBRARIES)\n"
	"    add_definitions(-DSFML_STATIC)\n"
	"endif()\n"
	"\n"
	"# define the list of search paths for headers and libraries\n"
	"set(FIND_SFML_PATHS\n"
	"    ${SFML_ROOT}\n"
	"    $ENV{SFML_ROOT}\n"
	"    ~/Library/Frameworks\n"
	"    /Library/Frameworks\n"
	"    /usr/local\n"
	"    /usr\n"
	"    /sw\n"
	"    /opt/local\n"
	"    /opt/csw\n"
	"    /opt)\n"
	"\n"
	"# find the SFML include directory\n"
	"find_path(SFML_INCLUDE_DIR SFML/Config.hpp\n"
	"          PATH_SUFFIXES include\n"
	"          PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"# check the version number\n"
	"set(SFML_VERSION_OK TRUE)\n"
	"if(SFML_FIND_VERSION AND SFML_INCLUDE_DIR)\n"
	"    # extract the major and minor version numbers from SFML/Config.hpp\n"
	"    # we have to handle framework a little bit differently:\n"
	"    if(\"${SFML_INCLUDE_DIR}\" MATCHES \"SFML.framework\")\n"
	"        set(SFML_CONFIG_HPP_INPUT \"${SFML_INCLUDE_DIR}/Headers/Config.hpp\")\n"
	"    else()\n"
	"        set(SFML_CONFIG_HPP_INPUT \"${SFML_INCLUDE_DIR}/SFML/Config.hpp\")\n"
	"    endif()\n"
	"    FILE(READ \"${SFML_CONFIG_HPP_INPUT}\" SFML_CONFIG_HPP_CONTENTS)\n"
	"    STRING(REGEX REPLACE \".*#define SFML_VERSION_MAJOR ([0-9]+).*\" \"\\\\1\" SFML_VERSION_MAJOR \"${SFML_CONFIG_HPP_CONTENTS}\")\n"
	"    STRING(REGEX REPLACE \".*#define SFML_VERSION_MINOR ([0-9]+).*\" \"\\\\1\" SFML_VERSION_MINOR \"${SFML_CONFIG_HPP_CONTENTS}\")\n"
	"    STRING(REGEX REPLACE \".*#define SFML_VERSION_PATCH ([0-9]+).*\" \"\\\\1\" SFML_VERSION_PATCH \"${SFML_CONFIG_HPP_CONTENTS}\")\n"
	"    if (NOT \"${SFML_VERSION_PATCH}\" MATCHES \"^[0-9]+$\")\n"
	"        set(SFML_VERSION_PATCH 0)\n"
	"    endif()\n"
	"    math(EXPR SFML_REQUESTED_VERSION \"${SFML_FIND_VERSION_MAJOR} * 10000 + ${SFML_FIND_VERSION_MINOR} * 100 + ${SFML_FIND_VERSION_PATCH}\")\n"
	"\n"
	"    # if we could extract them, compare with the requested version number\n"
	"    if (SFML_VERSION_MAJOR)\n"
	"        # transform version numbers to an integer\n"
	"        math(EXPR SFML_VERSION \"${SFML_VERSION_MAJOR} * 10000 + ${SFML_VERSION_MINOR} * 100 + ${SFML_VERSION_PATCH}\")\n"
	"\n"
	"        # compare them\n"
	"        if(SFML_VERSION LESS SFML_REQUESTED_VERSION)\n"
	"            set(SFML_VERSION_OK FALSE)\n"
	"        endif()\n"
	"    else()\n"
	"        # SFML version is < 2.0\n"
	"        if (SFML_REQUESTED_VERSION GREATER 10900)\n"
	"            set(SFML_VERSION_OK FALSE)\n"
	"            set(SFML_VERSION_MAJOR 1)\n"
	"            set(SFML_VERSION_MINOR x)\n"
	"            set(SFML_VERSION_PATCH x)\n"
	"        endif()\n"
	"    endif()\n"
	"endif()\n"
	"\n"
	"# find the requested modules\n"
	"set(SFML_FOUND TRUE) # will be set to false if one of the required modules is not found\n"
	"foreach(FIND_SFML_COMPONENT ${SFML_FIND_COMPONENTS})\n"
	"    string(TOLOWER ${FIND_SFML_COMPONENT} FIND_SFML_COMPONENT_LOWER)\n"
	"    string(TOUPPER ${FIND_SFML_COMPONENT} FIND_SFML_COMPONENT_UPPER)\n"
	"    set(FIND_SFML_COMPONENT_NAME sfml-${FIND_SFML_COMPONENT_LOWER})\n"
	"\n"
	"    # no suffix for sfml-main, it is always a static library\n"
	"    if(FIND_SFML_COMPONENT_LOWER STREQUAL \"main\")\n"
	"        # release library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"        # debug library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}-d\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"    else()\n"
	"        # static release library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_RELEASE\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}-s\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"        # static debug library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_DEBUG\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}-s-d\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"        # dynamic release library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_RELEASE\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"        # dynamic debug library\n"
	"        find_library(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_DEBUG\n"
	"                     NAMES ${FIND_SFML_COMPONENT_NAME}-d\n"
	"                     PATH_SUFFIXES lib64 lib\n"
	"                     PATHS ${FIND_SFML_PATHS})\n"
	"\n"
	"        # choose the entries that fit the requested link type\n"
	"        if(SFML_STATIC_LIBRARIES)\n"
	"            if(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_RELEASE)\n"
	"                set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_RELEASE})\n"
	"            endif()\n"
	"            if(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_DEBUG)\n"
	"                set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_DEBUG})\n"
	"            endif()\n"
	"        else()\n"
	"            if(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_RELEASE)\n"
	"                set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_RELEASE})\n"
	"            endif()\n"
	"            if(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_DEBUG)\n"
	"                set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_DEBUG})\n"
	"            endif()\n"
	"        endif()\n"
	"    endif()\n"
	"\n"
	"    if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG OR SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)\n"
	"        # library found\n"
	"        set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND TRUE)\n"
	"\n"
	"        # if both are found, set SFML_XXX_LIBRARY to contain both\n"
	"        if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)\n"
	"            set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY debug     ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG}\n"
	"                                                          optimized ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})\n"
	"        endif()\n"
	"\n"
	"        # if only one debug/release variant is found, set the other to be equal to the found one\n"
	"        if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE)\n"
	"            # debug and not release\n"
	"            set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})\n"
	"            set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY         ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG})\n"
	"        endif()\n"
	"        if (SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE AND NOT SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG)\n"
	"            # release and not debug\n"
	"            set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})\n"
	"            set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY       ${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE})\n"
	"        endif()\n"
	"    else()\n"
	"        # library not found\n"
	"        set(SFML_FOUND FALSE)\n"
	"        set(SFML_${FIND_SFML_COMPONENT_UPPER}_FOUND FALSE)\n"
	"        set(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY \"\")\n"
	"        set(FIND_SFML_MISSING \"${FIND_SFML_MISSING} SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY\")\n"
	"    endif()\n"
	"\n"
	"    # mark as advanced\n"
	"    MARK_AS_ADVANCED(SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_RELEASE\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DEBUG\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_RELEASE\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_STATIC_DEBUG\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_RELEASE\n"
	"                     SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY_DYNAMIC_DEBUG)\n"
	"\n"
	"    # add to the global list of libraries\n"
	"    set(SFML_LIBRARIES ${SFML_LIBRARIES} \"${SFML_${FIND_SFML_COMPONENT_UPPER}_LIBRARY}\")\n"
	"endforeach()\n"
	"\n"
	"# in case of static linking, we must also define the list of all the dependencies of SFML libraries\n"
	"if(SFML_STATIC_LIBRARIES)\n"
	"\n"
	"    # detect the OS\n"
	"    if(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n"
	"        set(FIND_SFML_OS_WINDOWS 1)\n"
	"    elseif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n"
	"        set(FIND_SFML_OS_LINUX 1)\n"
	"    elseif(${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n"
	"        set(FIND_SFML_OS_FREEBSD 1)\n"
	"    elseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n"
	"        set(FIND_SFML_OS_MACOSX 1)\n"
	"    endif()\n"
	"\n"
	"    # start with an empty list\n"
	"    set(SFML_DEPENDENCIES)\n"
	"    set(FIND_SFML_DEPENDENCIES_NOTFOUND)\n"
	"\n"
	"    # macro that searches for a 3rd-party library\n"
	"    macro(find_sfml_dependency output friendlyname)\n"
	"        # No lookup in environment variables (PATH on Windows), as they may contain wrong library versions\n"
	"        find_library(${output} NAMES ${ARGN} PATHS ${FIND_SFML_PATHS} PATH_SUFFIXES lib NO_SYSTEM_ENVIRONMENT_PATH)\n"
	"        if(${${output}} STREQUAL \"${output}-NOTFOUND\")\n"
	"            unset(output)\n"
	"            set(FIND_SFML_DEPENDENCIES_NOTFOUND \"${FIND_SFML_DEPENDENCIES_NOTFOUND} ${friendlyname}\")\n"
	"        endif()\n"
	"    endmacro()\n"
	"\n"
	"    # sfml-system\n"
	"    list(FIND SFML_FIND_COMPONENTS \"system\" FIND_SFML_SYSTEM_COMPONENT)\n"
	"    if(NOT ${FIND_SFML_SYSTEM_COMPONENT} EQUAL -1)\n"
	"\n"
	"        # update the list -- these are only system libraries, no need to find them\n"
	"        if(FIND_SFML_OS_LINUX OR FIND_SFML_OS_FREEBSD OR FIND_SFML_OS_MACOSX)\n"
	"            set(SFML_SYSTEM_DEPENDENCIES \"pthread\")\n"
	"        endif()\n"
	"        if(FIND_SFML_OS_LINUX)\n"
	"            set(SFML_SYSTEM_DEPENDENCIES ${SFML_SYSTEM_DEPENDENCIES} \"rt\")\n"
	"        endif()\n"
	"        if(FIND_SFML_OS_WINDOWS)\n"
	"            set(SFML_SYSTEM_DEPENDENCIES \"winmm\")\n"
	"        endif()\n"
	"        set(SFML_DEPENDENCIES ${SFML_SYSTEM_DEPENDENCIES} ${SFML_DEPENDENCIES})\n"
	"    endif()\n"
	"\n"
	"    # sfml-network\n"
	"    list(FIND SFML_FIND_COMPONENTS \"network\" FIND_SFML_NETWORK_COMPONENT)\n"
	"    if(NOT ${FIND_SFML_NETWORK_COMPONENT} EQUAL -1)\n"
	"\n"
	"        # update the list -- these are only system libraries, no need to find them\n"
	"        if(FIND_SFML_OS_WINDOWS)\n"
	"            set(SFML_NETWORK_DEPENDENCIES \"ws2_32\")\n"
	"        endif()\n"
	"        set(SFML_DEPENDENCIES ${SFML_NETWORK_DEPENDENCIES} ${SFML_DEPENDENCIES})\n"
	"    endif()\n"
	"\n"
	"    # sfml-window\n"
	"    list(FIND SFML_FIND_COMPONENTS \"window\" FIND_SFML_WINDOW_COMPONENT)\n"
	"    if(NOT ${FIND_SFML_WINDOW_COMPONENT} EQUAL -1)\n"
	"\n"
	"        # find libraries\n"
	"        if(FIND_SFML_OS_LINUX OR FIND_SFML_OS_FREEBSD)\n"
	"            find_sfml_dependency(X11_LIBRARY \"X11\" X11)\n"
	"            find_sfml_dependency(XRANDR_LIBRARY \"Xrandr\" Xrandr)\n"
	"        endif()\n"
	"\n"
	"        if(FIND_SFML_OS_LINUX)\n"
	"            find_sfml_dependency(UDEV_LIBRARIES \"UDev\" udev libudev)\n"
	"        endif()\n"
	"\n"
	"        # update the list\n"
	"        if(FIND_SFML_OS_WINDOWS)\n"
	"            set(SFML_WINDOW_DEPENDENCIES ${SFML_WINDOW_DEPENDENCIES} \"opengl32\" \"winmm\" \"gdi32\")\n"
	"        elseif(FIND_SFML_OS_LINUX)\n"
	"            set(SFML_WINDOW_DEPENDENCIES ${SFML_WINDOW_DEPENDENCIES} \"GL\" ${X11_LIBRARY} ${XRANDR_LIBRARY} ${UDEV_LIBRARIES})\n"
	"        elseif(FIND_SFML_OS_FREEBSD)\n"
	"            set(SFML_WINDOW_DEPENDENCIES ${SFML_WINDOW_DEPENDENCIES} \"GL\" ${X11_LIBRARY} ${XRANDR_LIBRARY} \"usbhid\")\n"
	"        elseif(FIND_SFML_OS_MACOSX)\n"
	"            set(SFML_WINDOW_DEPENDENCIES ${SFML_WINDOW_DEPENDENCIES} \"-framework OpenGL -framework Foundation -framework AppKit -framework IOKit -framework Carbon\")\n"
	"        endif()\n"
	"        set(SFML_DEPENDENCIES ${SFML_WINDOW_DEPENDENCIES} ${SFML_DEPENDENCIES})\n"
	"    endif()\n"
	"\n"
	"    # sfml-graphics\n"
	"    list(FIND SFML_FIND_COMPONENTS \"graphics\" FIND_SFML_GRAPHICS_COMPONENT)\n"
	"    if(NOT ${FIND_SFML_GRAPHICS_COMPONENT} EQUAL -1)\n"
	"\n"
	"        # find libraries\n"
	"        find_sfml_dependency(FREETYPE_LIBRARY \"FreeType\" freetype)\n"
	"        find_sfml_dependency(JPEG_LIBRARY \"libjpeg\" jpeg)\n"
	"\n"
	"        # update the list\n"
	"        set(SFML_GRAPHICS_DEPENDENCIES ${FREETYPE_LIBRARY} ${JPEG_LIBRARY})\n"
	"        set(SFML_DEPENDENCIES ${SFML_GRAPHICS_DEPENDENCIES} ${SFML_DEPENDENCIES})\n"
	"    endif()\n"
	"\n"
	"    # sfml-audio\n"
	"    list(FIND SFML_FIND_COMPONENTS \"audio\" FIND_SFML_AUDIO_COMPONENT)\n"
	"    if(NOT ${FIND_SFML_AUDIO_COMPONENT} EQUAL -1)\n"
	"\n"
	"        # find libraries\n"
	"        find_sfml_dependency(OPENAL_LIBRARY \"OpenAL\" openal openal32)\n"
	"        find_sfml_dependency(OGG_LIBRARY \"Ogg\" ogg)\n"
	"        find_sfml_dependency(VORBIS_LIBRARY \"Vorbis\" vorbis)\n"
	"        find_sfml_dependency(VORBISFILE_LIBRARY \"VorbisFile\" vorbisfile)\n"
	"        find_sfml_dependency(VORBISENC_LIBRARY \"VorbisEnc\" vorbisenc)\n"
	"        find_sfml_dependency(FLAC_LIBRARY \"FLAC\" FLAC)\n"
	"\n"
	"        # update the list\n"
	"        set(SFML_AUDIO_DEPENDENCIES ${OPENAL_LIBRARY} ${FLAC_LIBRARY} ${VORBISENC_LIBRARY} ${VORBISFILE_LIBRARY} ${VORBIS_LIBRARY} ${OGG_LIBRARY})\n"
	"        set(SFML_DEPENDENCIES ${SFML_DEPENDENCIES} ${SFML_AUDIO_DEPENDENCIES})\n"
	"    endif()\n"
	"\n"
	"endif()\n"
	"\n"
	"# handle errors\n"
	"if(NOT SFML_VERSION_OK)\n"
	"    # SFML version not ok\n"
	"    set(FIND_SFML_ERROR \"SFML found but version too low (requested: ${SFML_FIND_VERSION}, found: ${SFML_VERSION_MAJOR}.${SFML_VERSION_MINOR}.${SFML_VERSION_PATCH})\")\n"
	"    set(SFML_FOUND FALSE)\n"
	"elseif(SFML_STATIC_LIBRARIES AND FIND_SFML_DEPENDENCIES_NOTFOUND)\n"
	"    set(FIND_SFML_ERROR \"SFML found but some of its dependencies are missing (${FIND_SFML_DEPENDENCIES_NOTFOUND})\")\n"
	"    set(SFML_FOUND FALSE)\n"
	"elseif(NOT SFML_FOUND)\n"
	"    # include directory or library not found\n"
	"    set(FIND_SFML_ERROR \"Could NOT find SFML (missing: ${FIND_SFML_MISSING})\")\n"
	"endif()\n"
	"if (NOT SFML_FOUND)\n"
	"    if(SFML_FIND_REQUIRED)\n"
	"        # fatal error\n"
	"        message(FATAL_ERROR ${FIND_SFML_ERROR})\n"
	"    elseif(NOT SFML_FIND_QUIETLY)\n"
	"        # error but continue\n"
	"        message(\"${FIND_SFML_ERROR}\")\n"
	"    endif()\n"
	"endif()\n"
	"\n"
	"# handle success\n"
	"if(SFML_FOUND AND NOT SFML_FIND_QUIETLY)\n"
	"    message(STATUS \"Found SFML ${SFML_VERSION_MAJOR}.${SFML_VERSION_MINOR}.${SFML_VERSION_PATCH} in ${SFML_INCLUDE_DIR}\")\n"
	"endif()";

#endif //PROJECTCREATOR_FINDSFML_HPP
